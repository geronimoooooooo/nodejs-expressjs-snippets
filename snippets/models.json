{
  "User model": {
    "prefix": "a-models-user-pplm",
    "body": [
      "const mongoose = require('mongoose');",
      "const passportLocalMongoose = require('passport-local-mongoose');",
      "",
      "const UserSchema = new mongoose.Schema({",
      "  username: {type: String, required: true, unique: true},",
      "  email: {type: String, required: true, unique: true},",
      "  age: {type: Number, required: true }",
      "}, {timestamps: true});",
      "",
      "// Plugin passport-local-mongoose to handle password hashing and user authentication",
      "UserSchema.plugin(passportLocalMongoose);",
      "",
      "const UserModel = mongoose.model('user', UserSchema);",
      "module.exports = UserModel;"
    ],
    "description": "User model"
  },
  "schemaMongoose": {
        "prefix": "a-models-schema",
        "body": [
            "import mongoose from 'mongoose';",
            "",
            "const ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}Schema = mongoose.Schema(",
            "  {",
            "    content: {},",
            "  },",
            "  {",
            "    timestamps: true,",
            "  }",
            ");",
            "",
            "export default mongoose.model('${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}', ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}Schema);",
            ""
        ],
        "description": "Create schema mongoose"
    },
    "a bunch of models": {
    "prefix": "a-models-many",
    "body": [
        "// blog_app/models/article.js",
        "import mongoose from \"mongoose\";",
        "",
        "const ArticleSchema = new mongoose.Schema({",
        "  title: {",
        "    type: String,",
        "    required: true,",
        "  },",
        "  content: {",
        "    type: String,",
        "  },",
        "  date: { type: Date, default: Date.now },",
        "});",
        "",
        "const ArticleModel = mongoose.model(\"Article\", ArticleSchema);",
        "export default ArticleModel;",
        "",
        "import mongoose from \"mongoose\";",
        "import CourseModel from \"./CourseModel.js\";",
        "",
        "const CategorySchema = new mongoose.Schema({",
        "  id: {",
        "    type: Number    ",
        "  },",
        "  name: {",
        "    type: String,",
        "  },",
        "  courses: [{",
        "    type: mongoose.Schema.Types.ObjectId,",
        "    ref: \"Course\"",
        " }]",
        " ",
        "});",
        "",
        "const CategoryModel = mongoose.model(\"Category\", CategorySchema);",
        "export default CategoryModel;",
        "",
        "import mongoose from \"mongoose\";",
        "import QuestionModel from \"./QuestionModel.js\";",
        "",
        "const CourseSchema = new mongoose.Schema({",
        "  cid: {",
        "    type: Number,",
        "    required: true",
        "  },",
        "  courseName: {",
        "    type: String,",
        "    required: true",
        "  },",
        "  questions: [{ ",
        "    type: mongoose.Schema.Types.ObjectId,",
        "    ref: \"Question\"",
        " }]",
        " ",
        "});",
        "",
        "const CourseModel = mongoose.model(\"Course\", CourseSchema);",
        "export default CourseModel;",
        "",
        "import mongoose, { Schema } from \"mongoose\";",
        "",
        "const QuestionSchema = new mongoose.Schema({",
        "  qid: {",
        "    type: Number,",
        "    required: true",
        "  },",
        "  question: {",
        "    type: String,",
        "    required: true",
        "  },",
        "  answers: {",
        "    type: Schema.Types.Mixed",
        "  }",
        "});",
        "",
        "const QuestionModel = mongoose.model(\"Question\", QuestionSchema);",
        "export default QuestionModel;",
        "",
        "const userSchema = new mongoose.Schema({",
        "  name: {",
        "    type: String,",
        "    required: true,",
        "    minlength: 5,",
        "    maxlength: 50",
        "  },",
        "  email: {",
        "    type: String,",
        "    required: true,",
        "    minlength: 5,",
        "    maxlength: 255,",
        "    unique: true",
        "  },",
        "  password: {",
        "    type: String,",
        "    required: true,",
        "    minlength: 5,",
        "    maxlength: 1024",
        "  },",
        "  isAdmin: Boolean",
        "});"
    ],
    "description": "a bunch of models"
},
  "model complex": {
    "prefix": "a-models-complex",
    "body": [
      "const UserSchema = new mongoose.Schema({",
      "  fullname: {",
      "    type: String, // Data Type",
      "    min:6,",
      "    max:12,",
      "    required: [true, 'Please enter your fullname'], // Required with error",
      "    trim: true,",
      "  },",
      "  followersCount: {",
      "    type: Number,",
      "    default: 0,",
      "  },",
      "  followers: [{ type: mongoose.Schema.ObjectId, ref: 'User' }], // Array of Object Ids and ref to schema",
      "  createdAt: {",
      "    type: Date,",
      "    default: Date.now,",
      "  },",
      "  drink: {",
      "    type: String,",
      "    enum: ['Coffee', 'Tea', 'Water',]",
      "  }",
      "}",
      "  ",
      " module.exports = mongoose.model('User', UserSchema);"
    ],
    "description": "model complex"
  },
"models-ref-populate": {
    "prefix": "a-models-ref-populate",
    "body": [
        "const { Schema } = require('mongoose')",
        "",
        "const bookSchema = new Schema({",
        "  title: String,",
        "  description: String,",
        "  author: [ { type : Schema.Types.ObjectId, ref: 'Author' } ],",
        "  reviews: [",
        "    {",
        "      rating: Number,",
        "      content: String,",
        "      user: { type: Schema.Types.ObjectId, ref: 'User' }",
        "    }",
        "  ],",
        "  tags: [String],",
        "  published: Date",
        "}, {",
        "  timestamps: true",
        "})",
        "",
        "mongoose.model('Book', bookSchema)"
    ],
    "description": "schema with double ref populate"
},"models complete UserTaskPost": {
    "prefix": "a-models-completeUserTaskPost",
    "body": [
        "// const mongoose = require('mongoose');",
        "import mongoose from 'mongoose';",
        "",
        "const con = mongoose.connect('mongodb+srv://TT:TT@goldtrade.skpkklp.mongodb.net/');",
        "",
        "const TaskSchema = new mongoose.Schema({",
        "  description: String,",
        "  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User4' },",
        "});",
        "",
        "const UserSchema = new mongoose.Schema({",
        "  username: { type: String, unique: true, required: true },",
        "  password: { type: String, required: true },",
        "  age: Number,",
        "  email: String,",
        "  posts: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Post4' }],",
        "  tasks: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Task4' }],",
        "},",
        "  { timestamps: true }",
        ");",
        "",
        "const PostSchema = new mongoose.Schema({",
        "  title: String,",
        "  body: String,",
        "  author: { type: mongoose.Schema.Types.ObjectId, ref: 'User4' }",
        "},",
        "  { timestamps: true }",
        ");",
        "",
        "const Task4 = mongoose.model('Task4', TaskSchema);",
        "const User4 = mongoose.model('User4', UserSchema);",
        "const Post4 = mongoose.model('Post4', PostSchema);",
        "",
        "async function createUserTasksPosts() {",
        "  const user = await User4.create({ username: 'U1', password: 'pw', email: 'john@example.com' });",
        "  const task = await Task4.create({ description: 'Finish homework', user: user._id });",
        "  const post = await Post4.create({ title: 'tit7', body: \"someBody\", author: user._id });",
        "  user.tasks.push(task);",
        "  user.posts.push(post);",
        "  await user.save();",
        "  console.log(user);",
        "}",
        "",
        "async function getUserTasksAndPosts() {",
        "  const user3 = await User4.findOne({ username: 'U1' }).populate('posts').exec();",
        "  console.log('user: ' + user3.username);",
        "  console.log('user: ' + await user3.populate('posts'));",
        "  return user3._id;",
        "}",
        "",
        "async function addPostsToUser3() {",
        "  const user3 = await User4.findOne({ username: 'U1' })",
        "  const post = await Post4.create({ title: 'update1', body: \"someBody\", author: user3._id });",
        "",
        "  //post.author = user3._id;",
        "  user3.posts.push(post._id);",
        "  await user3.save();",
        "  console.log('user3: ' + await user3.populate('posts'));",
        "}",
        "",
        "async function addTasksToUser(userId) {",
        "  let user;",
        "  try {",
        "    user = await User4.findById(userId);",
        "    console.log(user);",
        "  } catch (err) {",
        "    if (err.name === 'CastError') {",
        "      console.error('Invalid ID');",
        "    } else {",
        "      console.error(err);",
        "    }",
        "  }",
        "  const task1 = await Task4.create({ description: 'Finish homework2', user: user._id });",
        "  const task2 = await Task4.create({ description: 'Buy groceries', user: user._id });",
        "  user.tasks.push(task1, task2);",
        "  await user.save();",
        "  console.log(await user.populate('tasks'));",
        "  // console.dir(user, { depth: null })",
        "}",
        "",
        "async function getUserIdByName() {",
        "  const user = await User4.findOne({ username: 'John' });",
        "  return user._id;",
        "}"
    ],
    "description": "models complete UserTaskPost"
},
  "models many-to-many": {
    "prefix": "a-models-many-to-many",
    "body": [
      "const mongoose = require('mongoose');",
      "",
      "// User Schema",
      "const userSchema = new mongoose.Schema({",
      "  name: String,",
      "  courses: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Course' }]  // Many-to-many relation to Course",
      "});",
      "",
      "// Course Schema",
      "const courseSchema = new mongoose.Schema({",
      "  title: String,",
      "  users: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }]  // Many-to-many relation to User",
      "});",
      "",
      "const User = mongoose.model('User', userSchema);",
      "const Course = mongoose.model('Course', courseSchema);",
      "",
      "// Creating Users and Courses",
      "async function createData() {",
      "  // Create new courses",
      "  const course1 = new Course({ title: 'Mathematics' });",
      "  const course2 = new Course({ title: 'Physics' });",
      "  await course1.save();",
      "  await course2.save();",
      "",
      "  // Create new user and assign courses",
      "  const user1 = new User({ name: 'Alice', courses: [course1._id, course2._id] });",
      "  const user2 = new User({ name: 'Bob', courses: [course1._id] });",
      "  await user1.save();",
      "  await user2.save();",
      "",
      "  // Add users to the course's users array to complete the relation",
      "  course1.users.push(user1._id, user2._id);",
      "  course2.users.push(user1._id);",
      "  await course1.save();",
      "  await course2.save();",
      "",
      "  console.log('Users and Courses created with relations.');",
      "}",
      "",
      "async function getUserWithCourses(userId) {",
      "  const user = await User.findById(userId).populate('courses').exec();",
      "  console.log('User with courses:', user);",
      "}",
      "",
      "async function getCourseWithUsers(courseId) {",
      "  const course = await Course.findById(courseId).populate('users').exec();",
      "  console.log('Course with users:', course);",
      "}"
    ],
    "description": "models many-to-many"
  }
}