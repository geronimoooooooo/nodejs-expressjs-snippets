{
  "create get endpoint": {
    "prefix": "a-routes-get",
    "body": [
      "${1:app}.get('${2:path}', (req, res)=>{",
      "\t$3",
      "});"
    ],
    "description": "Creates a get endpoint."
  },
  "render a view": {
    "prefix": "a-routes-get-render",
    "body": [
      "${1:app}.get('${2:path}', (req, res)=>{",
      "\tres.render('${3:ejsFile}');",
      "});"
    ],
    "description": "Render an ejs file."
  },
  "render a view with data": {
    "prefix": "a-routes-get-render2",
    "body": [
      "${1:app}.get('${2:path}', (req, res)=>{",
      "\tres.render('${3:ejsFile}', {${4:key}:${5:value}});",
      "});"
    ],
    "description": "Render an ejs file."
  },
  "register user": {
    "prefix": "a-routes-register",
    "body": [
      "app.post('/register', function(req, res){",
      "    // console.log(req.body.username);",
      "    // console.log(req.body.password);",
      "    User.register(new User({",
      "        username: req.body.username,",
      "        email: req.body.email}), ",
      "        req.body.password, function(err, user){",
      "        if(err){",
      "            console.log(err);",
      "            return res.render('register');",
      "        }",
      "        passport.authenticate('local')(req, res, function(){",
      "            res.redirect('/secret');",
      "        });",
      "    });",
      "});"
    ],
    "description": "register user"
  },
  "usermanagement with form": {
    "prefix": "a-routes-usermanag-form",
    "body": [
      "app.get('/secret', isLoggedIn, function(req, res){",
      "    console.log(req.user.username)",
      "    res.render('secret', {user: req.user});",
      "});",
      "",
      "app.get('/register', function(req, res){",
      "    res.render('register');",
      "});",
      "",
      "// handeling user sign up",
      "app.post('/register', function(req, res){",
      "    // console.log(req.body.username);",
      "    // console.log(req.body.password);",
      "    User.register(new User({",
      "        username: req.body.username,",
      "        email: req.body.email}), ",
      "        req.body.password, function(err, user){",
      "        if(err){",
      "            console.log(err);",
      "            return res.render('register');",
      "        }",
      "        passport.authenticate('local')(req, res, function(){",
      "            res.redirect('/secret');",
      "        });",
      "    });",
      "});",
      "",
      "// Login Form",
      "app.get('/login', function(req, res){",
      "    res.render('login');",
      "});",
      "",
      "// Login Logic",
      "// middleware",
      "app.post('/login', passport.authenticate('local',{",
      "    successRedirect: '/secret',",
      "    failureRedirect: '/login'",
      "}), function(req, res){",
      "    ",
      "});",
      "",
      "// Logout",
      "app.get('/logout', function(req, res, next) {",
      "    req.logout(function(err) {",
      "      if (err) { return next(err); }",
      "      res.redirect('/');",
      "    });",
      "  });",
      "",
      "// check isLoggedIn",
      "function isLoggedIn(req, res, next){",
      "    if(req.isAuthenticated()){",
      "        return next();",
      "    }",
      "    res.redirect('/login');",
      "}"
    ],
    "description": "usermanagement with form"
  },
  "usermanagement with postman": {
    "prefix": "a-routes-usermanag-postman",
    "body": [
      "/*",
      "  Login routes -- This is where we will use the 'local'",
      "  passport authenciation strategy. If success, send to",
      "  /login-success, if failure, send to /login-failure",
      "*/",
      "app.post('/login', passport.authenticate('local', { ",
      "  failureRedirect: '/login-failure', ",
      "  successRedirect: '/login-success'",
      "}), (err, req, res, next) => {",
      "  if (err) next(err);",
      "});",
      "",
      "app.get('/login-failure', (req, res, next) => {",
      "  console.log(req.session);",
      "  res.send('Login Attempt Failed.');",
      "});",
      "",
      "app.get('/login-success', (req, res, next) => {",
      "  console.log(req.session);",
      "  res.send('Login Attempt was successful.');",
      "});",
      "",
      "",
      "",
      "app.get('/logout', function(req, res, next) {",
      "    req.logout(function(err) {",
      "        if (err) { return next(err); }",
      "        console.log('you are logging out.')",
      "        res.redirect('/profile');",
      "    });",
      "});",
      "/*",
      "  Protected Route -- Look in the account controller for",
      "  how we ensure a user is logged in before proceeding.",
      "",
      "  We call 'isAuthenticated' to check if the request is ",
      "  authenticated or not. ",
      "*/",
      "app.get('/profile', function(req, res) {",
      "  console.log(req.session)",
      "  if (req.isAuthenticated()) {",
      "    res.json({ message: 'You made it to the secured profie' })",
      "  } else {",
      "    res.json({ message: 'You are not authenticated' })",
      "  }",
      "})"
    ],
    "description": "usermanagement with postman"
  }
}