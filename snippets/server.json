{
  "insert all reqs": {
    "prefix": "a-server-reqs",
    "body": [
      "require('dotenv').config();",
      "const fs         = require('fs');",
      "const path       =  require('path')",
      "const https      = require('https');",
      "const express = require('express');",
      "const mongoose = require('mongoose');",
      "const passport = require('passport');",
      "const LocalStrategy = require('passport-local').Strategy;",
      "const passportLocalMongoose = require('passport-local-mongoose');",
      "const session = require('express-session');",
      "const MongoStore = require('connect-mongo');",
      "const flash = require('connect-flash');",
      "const bodyParser = require('body-parser');",
      "const indexRoutes = require('./routes/index');",

      "const User = require('./models/User');",
      "const app = express()"
    ],
    "description": "Insert all the typical required modules"
  },
  "simple express server": {
    "prefix": "a-server-express",
    "body": [
      "//import express from 'express'",
      "const express = require('express');",
      "const app = express();",
      "",
      "// const hostname = '127.0.0.1';",
      "const port = process.env.PORT || 1337",
      "",
      "app.get('/', (req, res) => {        ",
      "  res.send('Hello, World! date: ' + new Date());",
      "})",
      "",
      "app.listen(port, ()=>{    ",
      "    console.log(`browse this url http://localhost:\\${port}`)",
      "});",
      ""
    ],
    "description": "Create a simple express server."
  },
    "node server": {
      "prefix": "a-server-node-server",
      "body": [
        "const http = require('http');",
        "",
        "const hostname = '127.0.0.1';",
        "const port = 3000;",
        "",
        "const server = http.createServer((req, res) => {",
        "  res.statusCode = 200;",
        "  res.setHeader('Content-Type', 'text/plain');",
        "  res.end('Hello, World!\n');",
        "});",
        "",
        "server.listen(port, hostname, () => {",
        "  console.log(`Server running at http://\\${hostname}:\\${port}/`);",
        "  console.log(`Use browser to call http://localhost:3000/`);",
        "}); "
      ],
      "description": "node server"
    },  
  "full blog server": {
    "prefix": "a-server-blog-full",
    "body": [
        "require('dotenv').config();",
        "const express = require('express');",
        "const fs = require('fs');",
        "const path = require('path')",
        "const https = require('https');",
        "const mongoose = require('mongoose');",
        "const passport = require('passport');",
        "const LocalStrategy = require('passport-local').Strategy;",
        "const passportLocalMongoose = require('passport-local-mongoose');",
        "const session = require('express-session');",
        "const MongoStore = require('connect-mongo');",
        "const flash = require('connect-flash');",
        "const bodyParser = require('body-parser');",
        "const indexRoutes = require('./routes/index');",
        "const User = require('./models/User');",
        "const app = express()",
        "",
        "const PORT = process.env.PORT",
        "const mongoString = process.env.MONGO_URL",
        "const host = process.env.HOST",
        "const portHTTPS = process.env.PORTHTTPS || 443",
        "",
        "mongoose.connect(mongoString);",
        "const db = mongoose.connection;",
        "",
        "app.use(session({",
        "  secret: 'your secret key',",
        "  resave: false,",
        "  saveUninitialized: true, //sometimes false",
        "  store: new MongoStore({ mongoUrl: db.client.s.url }) //or mongoUrl: mongoString",
        "}));",
        "",
        "app.use(passport.initialize());",
        "app.use(passport.session());",
        "",
        "// Configure Passport.js to use the User model",
        "passport.use(User.createStrategy()); //new",
        "//passport.use(new LocalStrategy(User.authenticate())); //old",
        "passport.serializeUser(User.serializeUser());",
        "passport.deserializeUser(User.deserializeUser());",
        "",
        "// Middleware to parse JSON",
        "app.use(bodyParser.json());",
        "app.use(express.urlencoded({ extended: false }));",
        "app.set('view engine', 'ejs');",
        "app.use(bodyParser.urlencoded({ extended: true }));",
        "app.use(flash());",
        "app.use('/', indexRoutes);",
        "",
        "//#region WEBSERVER",
        "//set NODE_OPTIONS=--openssl-legacy-provider in cmd in VS;read magic wiki",
        "if (host == 'vm04') {",
        "  const credentials = {",
        "    pfx: fs.readFileSync(path.join(__dirname, 'sslcert', 'STAR_xx_at.pfx'))",
        "  };",
        "  const httpsServer = https.createServer(credentials, app);",
        "",
        "  //443 used: check tomcat http://localhost:8080/ ",
        "  httpsServer.listen(portHTTPS, (err) => {",
        "    if (err) {",
        "      console.log(\"Error: \", err);",
        "      console.log(new Date().toISOString() + ` https server could not start on \\${host} port: \\${portHTTPS}`);",
        "    } else {",
        "      console.log(new Date().toISOString() + ` https server running on \\${host} port: \\${portHTTPS}`);",
        "      console.log(new Date().toISOString() + ` call: https:vm04`);",
        "    }",
        "  });",
        "} else {",
        "  const portHTTPS = process.env.PORTHTTPS || 443",
        "  app.listen(portHTTPS, (err) => {",
        "    if (err) {",
        "      console.log(\"Error: \", err);",
        "      console.log(new Date().toISOString() + ` https server on host \\${host} could not start on port: \\${portHTTPS}`);",
        "    } else {",
        "      console.log(new Date().toISOString() + ` https server running on host \\${host} port: \\${portHTTPS}`);",
        "      console.log(new Date().toISOString() + ` call: localhost:443 in Mozilla`);",
        "    }",
        "  });",
        "}",
        "//#endregion"
    ],
    "description": "server blog"
},
"only webserver": {
    "prefix": "a-server-webserver",
    "body": [
        "//#region WEBSERVER",
        "//set NODE_OPTIONS=--openssl-legacy-provider in cmd in VS;read magic wiki",
        "if (host == 'vm04') {",
        "  const credentials = {",
        "    pfx: fs.readFileSync(path.join(__dirname, 'sslcert', 'STAR_xx_at.pfx'))",
        "  };",
        "  const httpsServer = https.createServer(credentials, app);",

        "  //443 used: check tomcat http://localhost:8080/ ",
        "  httpsServer.listen(portHTTPS, (err) => {",
        "    if (err) {",
        "      console.log(\"Error: \", err);",
        "      console.log(new Date().toISOString() + ` https server could not start on \\${host} port: \\${portHTTPS}`);",
        "    } else {",
        "      console.log(new Date().toISOString() + ` https server running on \\${host} port: \\${portHTTPS}`);",
        "      console.log(new Date().toISOString() + ` call: https:vm04`);",
        "    }",
        "  });",
        "} else {",
        "  const portHTTPS = process.env.PORTHTTPS || 443",
        "  app.listen(portHTTPS, (err) => {",
        "    if (err) {",
        "      console.log(\"Error: \", err);",
        "      console.log(new Date().toISOString() + ` https server on host \\${host} could not start on port: \\${portHTTPS}`);",
        "    } else {",
        "      console.log(new Date().toISOString() + ` https server running on host \\${host} port: \\${portHTTPS}`);",
        "      console.log(new Date().toISOString() + ` call: localhost:443 in Mozilla`);",
        "    }",
        "  });",
        "}",
        "//#endregion"
    ],
    "description": "only webserver"
},
  "insert all mw-defs": {
    "prefix": "a-server-mw-defs",
    "body": [
      "// Middleware to parse JSON",
      "app.use(bodyParser.json());",
      "// allows to handle forms",
      "app.use(express.urlencoded({ extended: true }));",
      "app.set('view engine','ejs');",
      "//const path = require('path'); and npm install path",
      "app.set('views', path.join(__dirname, 'views')); // assuming 'views' is in the project root",
      "app.use(bodyParser.urlencoded({ extended: true }));",
      "app.use(flash());",
      "app.use((req, res, next)=>{",
      "  res.locals.isAuthenticated = isAuthenticated;",
      "  next();",
      "});",

      "app.use('/', indexRoutes);"
    ],
    "description": "insert some defs"
  },
  "read dotenv variables": {
    "prefix": "a-server-dot-env",
    "body": [
        "require('dotenv').config();",
        "const PORT = process.env.PORT || 1337",
        "const mongoString = process.env.MONGO_URL || $1",
        "const host = process.env.HOST",
        "const portHTTPS = process.env.PORTHTTPS || 443"
    ],
    "description": "read env variables"
},
  "big import": {
    "prefix": "a-server-import-big",
    "body": [
        "//#region IMPORTS",
        "import express from \"express\"",
        "import fs from \"fs\"",
        "import https from \"https\"",
        "import * as dotenv from \"dotenv\";",
        "import path from \"path\";",
        "import { fileURLToPath } from \"url\";",
        "import {routerIndex, loggingRequestsAsMw} from \"./routes/IndexRouter.js\";",
        "import * as routes_get from \"./routes/routes_get.mjs\"",
        "import users from './public/users.json' assert {type: \"json\"};",
        "//#endregion imports",
        "",
        "//#region DEFINITIONS",
        "const port = 3000;",
        "const app = express();",
        "const router = express.Router();",
        "const __filename = fileURLToPath(import.meta.url); //C:\\web\\first-project\\server.mjs ",
        "const __dirname = path.dirname(__filename); //C:\\web\\first-project",
        "app.use(express.json()); // for json",
        "app.use(express.urlencoded({ extended: true })); // for form data",
        "app.use(express.static('public')); //url/file.img abrufbar, wenn im public folder",
        "",
        "// app.engine('html', require('ejs').renderFile);",
        "app.set(\"view engine\", \"ejs\");",
        "// app.set(\"views\", __dirname);",
        "// require('dotenv').config();",
        "dotenv.config();",
        "//#endregion definitions",
        "",
        "",
        "//#region MIDDLEWARE",
        "// NOTE : Write Middleware logger Function above all Routes",
        "app.use(loggingRequestsAsMw)",
        "app.use('/', routerIndex);",
        "app.use('/cat', routerCategory);",
        "//#endregion MIDDLEWARE",
        "",
        "",
        "//#region GET",
        "// app.get('/', (req, res) => {",
        "//     res.render('index', {textIntro:\"txt\", xml:\"xml\"})",
        "// });",
        "//#endregion GET",
        "",
        "//#region GET",
        "app.get('/', (req, res) => {",
        "    res.send('Hello, World! '+new Date().toUTCString());",
        "});",
        "//#endregion GET"
    ],
    "description": "big import ES6"
},
  "export": {
    "prefix": "a-server-export",
    "body": [
      "export default ${1:router}",
      "export {posts} //ES6",
      "module.exports = UserModel; //CJS"
    ],
    "description": "export"
  },  
  "logger": {
    "prefix": "a-server-logger",
    "body": [
        "",
        "// const log4js = require(\"log4js\");",
        "import log4js from \"log4js\";",
        "const logger = log4js.getLogger(\"thing\");",
        "//use in the other file: const { logger } = require(\"./logger\");",
        "",
        "log4js.configure({",
        "\tappenders: {",
        "\t\tout: {",
        "\t\t\ttype: \"stdout\",",
        "\t\t\tlayout: {",
        "\t\t\t\ttype: \"pattern\",",
        "\t\t\t\t// Output will include filename and line number",
        "\t\t\t\t// %n %c",
        "\t\t\t\t// pattern: \"%d %p : %m [%f{1}.%M():%l] \",",
        "\t\t\t\tpattern: \"%d %p : %m \",",
        "\t\t\t},",
        "\t\t},",
        "\t},",
        "\tcategories: {",
        "\t\tdefault: { appenders: [\"out\"], level: \"info\", enableCallStack: true },",
        "\t},",
        "});",
        "// logger.info(\"this should give me a line number now\");",
        "",
        "// module.exports = {logger}",
        "export {logger}",
        "",
        "",
        ""
    ],
    "description": "logger"
},
"a bunch of classes": {
    "prefix": "a-server-classes",
    "body": [
        "export default class Answer {",
        "  constructor(id, answer, correct) {",
        "    this.id = id;",
        "    this.answer = answer;",
        "    this.correct = correct;",
        "  }",
        "  ",
        "  static categoriesComplete = []",
        "",
        "  static fromJSON(json) {",
        "    const answer = JSON.parse(json);",
        "    return new Answer(answer.id, answer.answer, answer.correct);",
        "  }",
        "}",
        "",
        "export default class Category {",
        "  constructor(id, name, courses) {",
        "    this.id = id;",
        "    this.name = name;",
        "    this.courses = courses;",
        "  }",
        "  ",
        "  static categoriesComplete = []",
        "",
        "  static fromJSON(json) {",
        "    const cat = JSON.parse(json);",
        "    return new Category(cat.id, cat.name, cat.courses);",
        "  }",
        "}",
        "",
        "class Course {",
        "  constructor(id, name, questions) {",
        "    this.cid = id;",
        "    this.courseName = name;",
        "    this.questions = questions;",
        "  }",
        "  ",
        "}",
        "export default Course",
        "",
        "class Question {",
        "  constructor(qid, question, answers) {",
        "    this.qid = qid;",
        "    this.question = question;",
        "    this.answers = answers;",
        "  }",
        "",
        "  static fromJSON(json) {",
        "    const q = JSON.parse(json);",
        "    return new Category(q.qid, q.question, q.answers);",
        "  }",
        "}",
        "export default Question"
    ],
    "description": "a bunch of classes"
}
}